import json
import logging
import re

import httpx
import pendulum
from flask import Blueprint
from flask import flash
from flask import redirect
from flask import render_template
from flask import request
from flask import url_for
from flask_login import login_required

from ichrisbirch.config import get_settings

settings = get_settings()
logger = logging.getLogger('app.home')
blueprint = Blueprint('home', __name__, template_folder='templates', static_folder='static')


@blueprint.route('/', methods=['GET'])
def index():
    return render_template('index.html', api_url=settings.api_url, chat_url=settings.chat_url)


@blueprint.route('/loading/', methods=['GET'])
def loading():
    return render_template('loading.html')


@blueprint.route('/issue/', methods=['GET', 'POST'])
@login_required
def issue():
    if request.method == 'GET':
        return redirect(url_for('home.index'))

    issue = request.form.to_dict()
    labels = [k for k, v in issue.items() if v == 'on']
    logger.debug(f'Issue submitted from page: {request.referrer}')
    logger.debug(f'Issue details: {issue}')
    body_template = f'''
        {issue['description']}


        ---
        ### Autogenerated Details

        **Date:** {pendulum.now().isoformat()}

        **Page:** {request.headers.get('Referer')}

        **IP Address:** {request.headers.get('X-Forwarded-For', request.remote_addr)}

        **User-Agent:**
        {'\n'.join([f'\t - {part})' for part in re.split(r'\)', request.headers.get('User-Agent', '')) if part])}
    '''
    dedented = '\n'.join(line.strip() for line in body_template.split('\n'))
    data = json.dumps({'title': issue['title'], 'body': dedented, 'labels': labels})

    try:
        response = httpx.post(settings.github.api_url_issues, content=data, headers=settings.github.api_headers)
        response.raise_for_status()
        flash('Issue submitted successfully', 'success')
    except httpx.HTTPError as e:
        error_message = f'Request Error: {e}'
        logger.error(error_message)
        flash(error_message, 'error')
        if response:
            logger.error(response.text)
            if settings.ENVIRONMENT == 'development':
                flash(response.text, 'error')

    return redirect(request.referrer or url_for('home.index'))
