name: Validate Project

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

# These permissions are needed to interact with GitHub's OIDC Token endpoint.
permissions:
  id-token: write
  contents: read

env:
  ENVIRONMENT: "testing"

defaults:
  run:
    shell: bash

jobs:

  lint:
    name: Lint Code
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, ubuntu-24.04]
        python-version: ["3.12"]
        poetry-version: ["1.3.2"]
        # Current poetry.lock file incompatible < 1.3.2

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Run shellcheck
        uses: ludeeus/action-shellcheck@master

      - name: Check Github Actions Workflow Files
        run: |
          bash <(curl https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash)
          ./actionlint -color -shellcheck=""

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Cache Poetry Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.virtualenvs
          key: ${{ matrix.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.python-version }}-poetry-

      - name: Install poetry
        run: python -m pip install poetry==${{ matrix.poetry-version }}

      - name: Poetry install CICD Dependencies
        run: poetry install --without dev,prod

      - name: Run black formatter
        uses: psf/black@stable
        with:
          options: "--check --verbose --color"

      - name: Run mypy
        run: poetry run mypy ichrisbirch --install-types --non-interactive --config-file pyproject.toml

      - name: Run flake8
        run: poetry run flake8 .

      - name: Run isort action
        uses: isort/isort-action@master

      - name: Run bandit
        run: poetry run bandit -c pyproject.toml -r .

  test:
    name: Run Tests
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, ubuntu-24.04]
        python-version: ["3.12"]
        poetry-version: ["1.3.2"]
        # Current poetry.lock file incompatible < 1.3.2

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Ubuntu Installs
        if: matrix.os == 'ubuntu-20.04' || matrix.os == 'ubuntu-22.04' || matrix.os == 'ubuntu-24.04'
        run: |
          sudo apt update
          sudo apt install git-secret gpg -y

      - name: "git-secret Reveal .env files"
        run: |
          # Import private key and avoid the "Inappropriate ioctl for device" error
          echo ${{ secrets.CICD_GPG_KEY }} | tr ',' '\n' | gpg --batch --yes --pinentry-mode loopback --import
          git secret reveal

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

        # The poetry dependencies have to be cached by the matrix.os and matrix.python-version instead of only
        # the runner.os version since psycopg2-binary gets compiled for one 'Linux' runner.os and then errors on another os
      - name: Cache Poetry Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.virtualenvs
          key: ${{ matrix.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.python-version }}-poetry-

      - name: Install poetry
        run: python -m pip install poetry==${{ matrix.poetry-version }}

      - name: Poetry install CICD Dependencies
        run: poetry install --without dev,prod

      - name: Get Playwright Version for Cache
        run: |
          PLAYWRIGHT_VERSION=$(poetry run playwright --version | grep -oE '[0-9.]+')
          echo "PLAYWRIGHT_VERSION=$PLAYWRIGHT_VERSION" >> "$GITHUB_ENV"

      # Cache browser binaries, cache key is based on Playwright version and OS
      - name: Cache Playwright Browser Binaries
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: "~/.cache/ms-playwright"
          key: "${{ matrix.os }}-${{ matrix.python-version }}-playwright-${{ env.PLAYWRIGHT_VERSION }}"
          restore-keys: |
                  ${{ matrix.os }}-${{ matrix.python-version }}-playwright-

      - name: Install Playwright Browsers
        run: poetry run playwright install
        if: steps.playwright-cache.outputs.cache-hit != 'true'

      - name: Run pytest with Coverage
        run: poetry run pytest --cov=ichrisbirch
