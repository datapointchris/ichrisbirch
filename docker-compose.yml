# Docker Compose will automatically read from a .env file in the same directory

services:
  # Nginx reverse proxy - Production configuration
  nginx:
    image: nginx:alpine
    container_name: ichrisbirch-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/prod/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deploy/prod/nginx/api.conf:/etc/nginx/conf.d/api.conf:ro
      - ./deploy/prod/nginx/app.conf:/etc/nginx/conf.d/app.conf:ro
      - ./deploy/prod/nginx/chat.conf:/etc/nginx/conf.d/chat.conf:ro
      # - ./nginx/ssl:/etc/nginx/ssl:ro  # Uncomment for SSL certificates
    depends_on:
      - api
      - app
      - chat
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "nginx"

  # PostgreSQL Database Service - Production optimized for performance and reliability
  postgres:
    image: postgres:16-alpine
    container_name: ichrisbirch-postgres
    environment:
      - POSTGRES_DB=ichrisbirch
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}  # Use environment variable for security
    # Remove ports mapping for security (only accessible within Docker network)
    ports: []
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # Production database optimizations for high performance
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c max_connections=100
      -c shared_buffers=512MB
      -c effective_cache_size=1536MB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ichrisbirch"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "postgres"

  # Redis Cache Service - Production optimized for performance and persistence
  redis:
    image: redis:7-alpine
    container_name: ichrisbirch-redis
    # Remove external ports for security (only accessible within Docker network)
    ports: []
    # Production Redis optimizations for high performance
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --rdbcompression yes
      --rdbchecksum yes
      --appendonly yes
      --appendfsync everysec
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "redis"

  # FastAPI Backend Service - Production configuration
  api:
    build:
      context: .
      target: production
    container_name: ichrisbirch-api
    # Production command without reload, disable access logs (handled by middleware)
    command: uvicorn ichrisbirch.wsgi_api:api --host 0.0.0.0 --port 8000 --workers 4 --no-access-log
    environment:
      - ENVIRONMENT=production
      - FASTAPI_DEBUG=False
    # Remove external ports for security (only accessible within Docker network)
    ports: []
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    working_dir: /app
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "api"

  # Flask Frontend Service - Production configuration
  app:
    build:
      context: .
      target: production
    container_name: ichrisbirch-app
    # Production WSGI server
    command: gunicorn --bind 0.0.0.0:5000 --workers 4 ichrisbirch.wsgi_app:app
    environment:
      - ENVIRONMENT=production
      - FLASK_DEBUG=False
    # Remove external ports for security (only accessible within Docker network)
    ports: []
    depends_on:
      - api
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    working_dir: /app
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "app"

  # Chat Service (Streamlit) - Production configuration
  chat:
    build:
      context: .
      target: production
    container_name: ichrisbirch-chat
    # Production chat command
    command: streamlit run ichrisbirch/chat/app.py --server.address=0.0.0.0 --server.port=8505 --server.headless=true
    environment:
      - ENVIRONMENT=production
      - CONTAINER_LOG_DIR=/app/logs  # Container always uses /app/logs
    # Remove external ports for security (only accessible within Docker network)
    ports: []
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    restart: always
    # Disable health check for chat (Streamlit doesn't have standard health endpoint)
    healthcheck:
      disable: true
    working_dir: /app
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "chat"

  # Scheduler Service - Production configuration
  scheduler:
    build:
      context: .
      target: production
    container_name: ichrisbirch-scheduler
    # Production scheduler command
    command: python -m ichrisbirch.wsgi_scheduler
    environment:
      - ENVIRONMENT=production
      - CONTAINER_LOG_DIR=/app/logs  # Container always uses /app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    restart: always
    # Disable health check for scheduler (no HTTP server)
    healthcheck:
      disable: true
    working_dir: /app
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "scheduler"

# Production volumes using standard names
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Default network for service communication
networks:
  default:
    driver: bridge
